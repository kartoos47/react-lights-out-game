{"version":3,"sources":["Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","evt","flipCellsAroundMe","position","classes","isLit","react_default","a","createElement","className","onClick","Component","Board","state","hasWon","board","createBoard","flipCellsAround","restartGame","y","nrows","row","x","ncols","push","Math","random","chanceLightStartsOn","coord","_this$props","newBoard","toConsumableArray","_coord$split$map","split","map","Number","_coord$split$map2","slicedToArray","flipCell","every","cell","setState","_this2","react","tblBoard","item","index","key","val","idx","src_Cell_0","concat","defaultProps","App","src_Board_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6c7cca6b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Cell.css\";\n\n/** A single cell on the board.\n *\n * This has no state --- just two props:\n *\n * - flipCellsAroundMe: a function rec'd from the board which flips this\n *      cell and the cells around of it\n *\n * - isLit: boolean, is this cell lit?\n *\n * This handles clicks --- by calling flipCellsAroundMe\n *\n **/\n\nclass Cell extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(evt) {\n    // call up to the board to flip cells around this cell\n\n    this.props.flipCellsAroundMe(this.props.position);\n  }\n\n  render() {\n    let classes = \"Cell\" + (this.props.isLit ? \" Cell-lit\" : \"\");\n\n    return <td className={classes} onClick={this.handleClick} />;\n  }\n}\n\nexport default Cell;\n","import React, { Component, Fragment } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n    chanceLightStartsOn: 0.25\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasWon: false,\n      board: this.createBoard()\n    };\n    this.flipCellsAround = this.flipCellsAround.bind(this);\n    this.restartGame = this.restartGame.bind(this);\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n    for (let y = 0; y < this.props.nrows; y++) {\n      let row = [];\n      for (let x = 0; x < this.props.ncols; x++) {\n        row.push(Math.random() < this.props.chanceLightStartsOn);\n      }\n      board.push(row);\n    }\n    return board;\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let { ncols, nrows } = this.props;\n    let newBoard = [...this.state.board];\n    let [y, x] = coord.split(\"-\").map(Number);\n\n    const flipCell = (y, x) => {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        newBoard[y][x] = !newBoard[y][x];\n      }\n    };\n\n    flipCell(y, x); //Flip initial cell\n    flipCell(y, x - 1); //Flip left\n    flipCell(y, x + 1); // Flip right\n    flipCell(y - 1, x); // Flip below\n    flipCell(y + 1, x); // Flip above\n\n    // TODO: flip this cell and the cells around it\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n\n    const hasWon = newBoard.every(row => row.every(cell => !cell));\n\n    this.setState({ board: newBoard, hasWon: hasWon });\n  }\n\n  restartGame() {\n    this.setState({\n      hasWon: false,\n      board: this.createBoard()\n    });\n  }\n\n  /** Render game board or winning message. */\n\n  render() {\n    // if the game is won, just show a winning msg & render nothing else\n    if (this.state.hasWon) {\n      return (\n        <Fragment>\n          <div className=\"board-title\">\n            <div className=\"winner\">\n              <span className=\"neon-orange\">You</span>\n              <span className=\"neon-blue\">Won</span>\n            </div>\n          </div>\n\n          <button className=\"restart-btn\" onClick={this.restartGame}>\n            Play Again\n          </button>\n        </Fragment>\n      );\n    }\n\n    let tblBoard = this.state.board.map((item, index) => (\n      <tr key={index}>\n        {item.map((val, idx) => (\n          <Cell\n            key={`${index}-${idx}`}\n            position={`${index}-${idx}`}\n            isLit={val}\n            flipCellsAroundMe={this.flipCellsAround}\n          />\n        ))}\n      </tr>\n    ));\n\n    return (\n      <div>\n        <div className=\"board-title\">\n          <div className=\"neon-orange\">Lights</div>\n          <div className=\"neon-blue\">Out</div>\n        </div>\n        <table className=\"Board\">\n          <tbody>{tblBoard}</tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","import React, { Component } from \"react\";\nimport Board from \"./Board\";\nimport \"./App.css\";\n\n/** Simple app that just shows the LightsOut game. */\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}